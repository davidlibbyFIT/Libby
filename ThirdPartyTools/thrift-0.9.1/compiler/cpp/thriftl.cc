
#line 3 "thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 169
#define YY_END_OF_BUFFER 170
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1708] =
    {   0,
        1,  162,    1,  162,  170,  167,  168,  169,    1,  167,
      168,  169,    1,  169,  165,  167,  168,  169,    5,  167,
      168,  169,    6,  167,  168,  169,    7,  167,  168,  169,
      162,  167,  168,  169,  162,  164,  167,  168,  169,  167,
      168,  169,  167,  168,  169,  160,  162,  167,  168,  169,
      160,  162,  167,  168,  169,  163,  164,  167,  168,  169,
      163,  164,  167,  168,  169,  163,  164,  167,  168,  169,
      163,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,

      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,    1,    5,  160,  162,  164,  160,
      162,  164,  164,  162,    4,  163,  164,  163,  164,  164,

      162,  163,  164,  163,  164,  163,  163,  163,  164,  163,
      164,  163,  164,  163,  164,   70,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
       84,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  107,  163,  164,  163,  164,  110,  163,  164,  114,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,

      163,  164,  163,  164,  122,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  162,  162,  164,
      162,  164,    4,  161,  163,  164,   58,  163,  164,  163,
      163,  163,  163,  163,  163,  163,  164,  163,  164,   68,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,

      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,   80,  163,  164,   82,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
       90,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  102,
      163,  164,  163,  164,  163,  164,  163,  164,   33,  163,
      164,   34,  163,  164,   35,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,   41,  163,  164,  163,  164,  163,  164,

      163,  164,  118,  163,  164,  163,  164,  120,  163,  164,
      121,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,   43,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      145,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  151,  163,  164,  152,  163,

      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  158,  163,  164,  163,  164,  163,  164,
        2,  163,  164,  163,  163,  163,  163,  163,  163,  163,
      163,  164,  163,  164,   69,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,   31,  163,  164,  163,  164,
       32,  163,  164,   74,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,   86,  163,  164,   87,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,

      163,  164,  163,  164,   52,  163,  164,  163,  164,   99,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  106,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,   42,  163,  164,  163,  164,
      163,  164,  163,  164,  119,  163,  164,  163,  164,  163,
      164,  123,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      130,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  135,  163,  164,  163,  164,

      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      141,  163,  164,  142,  163,  164,  163,  164,  163,  164,
        9,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,   30,  163,  164,
      163,  164,  155,  163,  164,  163,  164,  157,  163,  164,
      163,  164,  163,  164,    3,    2,  166,   57,  163,  164,
      163,  163,  163,  163,  163,  163,  163,  163,  164,   67,
      163,  164,  163,  164,   56,  163,  164,   72,  163,  164,
      163,  164,   73,  163,  164,   75,  163,  164,   76,  163,

      164,   77,  163,  164,  163,  164,   53,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,   89,  163,  164,  163,  164,  163,  164,
       94,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,    8,  163,  164,  163,  164,  101,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  125,  163,  164,

      163,  164,  163,  164,  163,  164,  163,  164,  129,  163,
      164,  163,  164,  163,  164,  163,  164,  132,  163,  164,
      163,  164,  163,  164,   40,  163,  164,  163,  164,  163,
      164,   39,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  138,  163,  164,  163,  164,  163,  164,  143,
      163,  164,  163,  164,  163,  164,  146,  163,  164,   47,
      147,  163,  164,  163,  164,  163,  164,  150,  163,  164,
      163,  164,  163,  164,  156,  163,  164,  163,  164,  163,
      164,  163,  164,  159,  163,  164,    3,  166,    2,  166,
      163,  163,  163,  163,  163,  163,  163,  163,  164,   71,

      163,  164,   38,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,   83,  163,  164,  163,  164,   36,  163,  164,  163,
      164,   88,  163,  164,  163,  164,   92,  163,  164,  163,
      164,  163,  164,   97,  163,  164,   98,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  105,  163,  164,
      163,  164,  109,  163,  164,  163,  164,  111,  163,  164,
      163,  164,  163,  164,  163,  164,  115,  163,  164,  116,
      163,  164,  163,  164,  117,  163,  164,   44,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,

      124,  128,  163,  164,  163,  164,  163,  164,  163,  164,
      131,  163,  164,  134,  163,  164,  163,  164,  163,  164,
      136,  163,  164,  163,  164,  137,  163,  164,   37,  163,
      164,   46,  163,  164,  139,  163,  164,  163,  164,   50,
      163,  164,  163,  164,  163,  164,  148,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  166,  163,   60,  163,  163,
      163,  163,  163,  163,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,   79,  163,
      164,   81,  163,  164,  163,  164,   85,  163,  164,  163,

      164,  163,  164,  163,  164,  163,  164,  163,  164,   49,
      163,  164,  100,  163,  164,  103,  163,  164,  163,  164,
      163,  164,   29,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  126,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,   51,  163,  164,  163,  164,  163,  164,  163,
      164,   45,  163,  164,  163,  164,  153,  163,  164,  163,
      164,   24,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,   61,  163,  163,   63,  163,  163,  163,
       66,  163,  164,  163,  164,   78,  163,  164,  163,  164,

      163,  164,   13,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,   96,  163,  164,  163,  164,
      104,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,   55,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  133,  163,  164,   54,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  149,  163,
      164,  154,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,   59,  163,  163,  163,  163,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,   95,  163,  164,   48,  163,  164,  163,  164,  163,

      164,  113,  163,  164,  163,  164,   10,  163,  164,  163,
      164,  163,  164,  127,  163,  164,   19,  163,  164,  163,
      164,  163,  164,  163,  164,  144,  163,  164,   28,  163,
      164,  163,  164,  163,  164,  163,  164,  163,   64,  163,
      163,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,   91,  163,  164,   93,  163,  164,  108,  163,  164,
      112,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  163,  163,  164,   12,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,

      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,   62,  163,  163,   15,  163,  164,
      163,  164,  163,  164,  163,  164,   14,  163,  164,   20,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      140,  163,  164,  163,  164,   26,  163,  164,   25,  163,
      164,   65,  163,   11,  163,  164,  163,  164,  163,  164,
       18,  163,  164,  163,  164,  163,  164,  163,  164,   27,
      163,  164,  163,  164,  163,  164,   21,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,   16,  163,  164,   17,  163,  164,  163,  164,   23,

      163,  164,  163,  164,   22,  163,  164
    } ;

static yyconst flex_int16_t yy_accept[789] =
    {   0,
        1,    3,    5,    6,    9,   13,   15,   19,   23,   27,
       31,   35,   40,   43,   46,   51,   56,   61,   66,   71,
       75,   80,   85,   90,   95,  100,  105,  110,  115,  120,
      125,  130,  135,  140,  145,  150,  155,  160,  165,  170,
      175,  180,  185,  186,  187,  187,  189,  189,  190,  190,
      193,  194,  195,  195,  196,  196,  196,  198,  200,  200,
      201,  204,  206,  206,  207,  208,  210,  212,  214,  216,
      219,  221,  223,  225,  227,  229,  231,  233,  235,  237,
      239,  241,  244,  246,  248,  250,  252,  254,  256,  258,
      260,  262,  264,  266,  268,  270,  272,  275,  277,  280,

      283,  285,  287,  289,  291,  293,  295,  297,  299,  301,
      303,  305,  308,  310,  312,  314,  316,  318,  320,  322,
      324,  326,  328,  330,  332,  334,  336,  338,  340,  342,
      344,  346,  348,  350,  352,  354,  356,  358,  360,  362,
      364,  366,  368,  369,  369,  371,  373,  373,  373,  374,
      375,  377,  380,  381,  382,  383,  384,  385,  386,  388,
      390,  393,  395,  397,  399,  401,  403,  405,  407,  409,
      411,  413,  415,  417,  419,  421,  423,  425,  427,  430,
      433,  435,  437,  439,  441,  444,  446,  448,  450,  452,
      454,  456,  458,  460,  463,  465,  467,  469,  472,  475,

      478,  480,  482,  484,  486,  488,  490,  492,  494,  497,
      499,  501,  503,  506,  508,  511,  514,  516,  518,  520,
      522,  524,  526,  528,  530,  532,  534,  536,  538,  540,
      542,  544,  546,  548,  550,  552,  555,  557,  559,  561,
      563,  565,  567,  569,  571,  573,  575,  577,  579,  581,
      584,  586,  588,  590,  592,  594,  596,  599,  602,  604,
      606,  608,  610,  612,  614,  617,  619,  621,  621,  621,
      621,  621,  621,  622,  624,  625,  626,  627,  628,  629,
      630,  631,  633,  635,  638,  640,  642,  644,  646,  649,
      651,  654,  657,  659,  661,  663,  665,  667,  669,  671,

      673,  675,  677,  679,  681,  683,  685,  688,  691,  693,
      695,  697,  699,  701,  703,  705,  708,  710,  713,  715,
      717,  719,  721,  723,  725,  727,  730,  732,  734,  736,
      738,  740,  742,  744,  746,  749,  751,  753,  755,  758,
      760,  762,  765,  767,  769,  771,  773,  775,  777,  779,
      781,  784,  786,  788,  790,  792,  794,  796,  799,  801,
      803,  805,  807,  809,  811,  813,  815,  817,  819,  821,
      824,  827,  829,  831,  834,  836,  838,  840,  842,  844,
      846,  848,  851,  853,  856,  858,  861,  863,  865,  865,
      865,  866,  866,  866,  866,  866,  868,  871,  872,  873,

      874,  875,  876,  877,  878,  880,  883,  885,  888,  891,
      893,  896,  899,  902,  905,  907,  910,  912,  914,  916,
      918,  920,  922,  924,  926,  928,  930,  932,  934,  937,
      939,  941,  944,  946,  948,  950,  952,  954,  957,  959,
      962,  964,  966,  968,  970,  972,  974,  976,  978,  980,
      982,  984,  986,  988,  990,  992,  994,  996,  998, 1001,
     1003, 1005, 1007, 1009, 1012, 1014, 1016, 1018, 1021, 1023,
     1025, 1028, 1030, 1032, 1035, 1037, 1039, 1041, 1043, 1046,
     1048, 1050, 1053, 1055, 1057, 1060, 1064, 1066, 1068, 1071,
     1073, 1075, 1078, 1080, 1082, 1084, 1087, 1087, 1088, 1088,

     1089, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
     1100, 1103, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120,
     1122, 1125, 1127, 1130, 1132, 1135, 1137, 1140, 1142, 1144,
     1147, 1150, 1152, 1154, 1156, 1158, 1161, 1163, 1166, 1168,
     1171, 1173, 1175, 1177, 1180, 1183, 1185, 1188, 1191, 1193,
     1195, 1197, 1199, 1201, 1205, 1207, 1209, 1211, 1214, 1217,
     1219, 1221, 1224, 1226, 1229, 1232, 1235, 1238, 1240, 1243,
     1245, 1247, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264,
     1266, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1277,
     1279, 1281, 1283, 1285, 1287, 1289, 1292, 1295, 1297, 1300,

     1302, 1304, 1306, 1308, 1310, 1313, 1316, 1319, 1321, 1323,
     1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340, 1343, 1345,
     1347, 1349, 1351, 1353, 1356, 1358, 1360, 1362, 1365, 1367,
     1370, 1372, 1375, 1377, 1379, 1381, 1383, 1384, 1386, 1387,
     1389, 1390, 1391, 1394, 1396, 1399, 1401, 1403, 1406, 1408,
     1410, 1412, 1414, 1416, 1419, 1421, 1424, 1426, 1428, 1430,
     1432, 1434, 1437, 1439, 1441, 1443, 1445, 1448, 1451, 1453,
     1455, 1457, 1459, 1462, 1465, 1467, 1469, 1471, 1473, 1475,
     1476, 1477, 1478, 1480, 1482, 1484, 1486, 1488, 1490, 1492,
     1495, 1498, 1500, 1502, 1505, 1507, 1510, 1512, 1514, 1517,

     1520, 1522, 1524, 1526, 1529, 1532, 1534, 1536, 1538, 1539,
     1541, 1542, 1544, 1546, 1548, 1550, 1552, 1555, 1558, 1561,
     1564, 1566, 1568, 1570, 1572, 1574, 1576, 1578, 1580, 1582,
     1583, 1584, 1586, 1589, 1591, 1593, 1595, 1597, 1599, 1601,
     1603, 1605, 1607, 1609, 1611, 1613, 1615, 1617, 1618, 1621,
     1623, 1625, 1627, 1630, 1633, 1635, 1637, 1639, 1641, 1644,
     1646, 1649, 1652, 1654, 1657, 1659, 1661, 1664, 1666, 1668,
     1670, 1673, 1675, 1677, 1680, 1682, 1684, 1686, 1688, 1690,
     1692, 1695, 1698, 1700, 1703, 1705, 1708, 1708
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    4,    6,
        6,    7,    8,    6,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   17,   17,   17,    6,    6,    6,
        6,    6,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   28,   29,   30,   31,   32,   33,
       28,   34,   35,   36,   37,   28,   28,   28,   28,   28,
        6,    1,    6,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    6,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        1,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    5,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    6,    6,
        6,    6,    5,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[800] =
    {   0,
        0,    0,  835, 2588,   63,   65, 2588,    0, 2588, 2588,
       59,   93,   58,   70,   69,  751,   74,   76,  129,   77,
      109,  111,  118,   87,  168,  153,   79,  180,   84,  160,
      187,  195,  199,  204,  206,  259,  218,  226,  247,  212,
      262,  104,   88,    0,  275,  737,  315,  781,  324,  333,
      369,  345,  774,    0,    0,   91,  115,  192,  357,  379,
      303,  201,  714,  704,  274,  357,  178,  266,  146,  389,
      252,  391,  394,  270,  396,  398,  400,  407,  125,  403,
      416,  409,  411,  414,  420,  424,  422,  418,  427,  431,
      441,  435,  464,  466,  476,  482,  143,  485,  487,  316,

      490,  492,  494,  498,  496,  502,  500,  504,  506,  514,
      508,  510,  516,  520,  523,  525,  531,  537,  539,  546,
      549,  558,  560,  570,  572,  574,  583,  585,  587,  597,
      589,  609,  612,  617,  624,  626,  636,  632,  640,  646,
      648,  656,  679,  694,  693,  705,  115,  222,    0,    0,
      658,  662,   88,   68,  575,  272,  229,  297,  667,  691,
      664,  678,  703,  717,  719,  722,  724,  728,  730,  732,
      735,  738,  740,  743,  745,  747,  749,  754,  761,  768,
      770,  773,  777,  780,  784,  788,  797,  799,  805,  807,
      809,  815,  820,  824,  827,  829,  834,  842,  846,  848,

      851,  853,  855,  861,  863,  866,  868,  870,  872,  874,
      879,  876,  881,  883,  885,  887,  889,  900,  902,  904,
      906,  908,  911,  915,  920,  917,  922,  925,  927,  929,
      933,  936,  939,  942,  946,  948,  952,  954,  957,  967,
      969,  971,  975,  978,  984,  981,  987,  993,  999,  995,
     1003, 1008, 1011, 1013, 1020, 1022, 1017, 1025, 1034, 1038,
     1040, 1043, 1048, 1045, 1050, 1052, 1056,  677,  259,  266,
      674,  404,  620, 1062,  325,   70,  454,  163,  511,  344,
      291, 1064, 1066, 1068, 1072, 1074, 1077, 1079, 1087, 1090,
     1092, 1094, 1098, 1100, 1102, 1104, 1107, 1109, 1112, 1115,

     1121, 1117, 1123, 1127, 1132, 1137, 1139, 1142, 1152, 1144,
     1157, 1159, 1165, 1168, 1174, 1170, 1181, 1176, 1184, 1188,
     1190, 1192, 1195, 1197, 1199, 1202, 1206, 1208, 1210, 1213,
     1215, 1218, 1223, 1233, 1235, 1237, 1242, 1247, 1249, 1253,
     1257, 1261, 1263, 1267, 1269, 1272, 1274, 1276, 1279, 1281,
     1284, 1286, 1288, 1293, 1295, 1299, 1303, 1305, 1311, 1316,
     1319, 1321, 1324, 1328, 1330, 1335, 1337, 1339, 1341, 1344,
     1347, 1350, 1355, 1357, 1359, 1361, 1368, 1374, 1376, 1379,
     1381, 1385, 1387, 1389, 1393, 1397, 1399, 1404,  431,  520,
     2588,  598,  618,  636,  761, 2588, 1406,  209,  577,  231,

      448,  412,  564,  628, 1408, 1413, 1415, 1417, 1423, 1425,
     1432, 1434, 1439, 1444, 1446, 1448, 1450, 1452, 1454, 1456,
     1458, 1460, 1465, 1462, 1467, 1470, 1473, 1477, 1480, 1482,
     1485, 1487, 1489, 1491, 1497, 1499, 1501, 1508, 1515, 1517,
     1519, 1521, 1523, 1525, 1535, 1537, 1539, 1542, 1544, 1546,
     1552, 1549, 1554, 1560, 1557, 1562, 1565, 1568, 1571, 1574,
     1576, 1580, 1586, 1588, 1592, 1595, 1600, 1602, 1606, 1613,
     1615, 1620, 1624, 1617, 1626, 1628, 1630, 1632, 1635, 1637,
     1639, 1643, 1645, 1650, 1647, 1653, 1657, 1661, 1663, 1667,
     1669, 1671, 1676, 1678, 1687, 1689,  609,  554,  794, 2588,

      552,  525,  654,  972, 1203,  354, 1390,  733,  839, 1692,
     1694, 1698, 1700, 1702, 1709, 1711, 1713, 1718, 1720, 1722,
     1726, 1728, 1730, 1733, 1735, 1737, 1739, 1742, 1748, 1750,
     1755, 1759, 1761, 1763, 1766, 1768, 1774, 1776, 1779, 1781,
     1784, 1787, 1794, 1796, 1798, 1801, 1803, 1805, 1811, 1818,
     1820, 1822, 1825, 1827, 1829, 1832, 1834, 1836, 1838, 1842,
     1844, 1846, 1850, 1852, 1854, 1857, 1859, 1863, 1869, 1875,
     1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895, 1897, 1899,
      470, 1440,  392, 1512,  651, 1743,  810,  590, 1901, 1904,
     1910, 1912, 1920, 1922, 1914, 1917, 1924, 1926, 1933, 1935,

     1940, 1945, 1958, 1960, 1962, 1966, 1971, 1973, 1975, 1978,
     1980, 1983, 1985, 1987, 1989, 1993, 1995, 1997, 1999, 2001,
     2005, 2007, 2009, 2011, 2020, 2022, 2026, 2031, 2034, 2036,
     2038, 2043, 2045, 2047, 2049, 2053, 1785,  342,  752,  304,
     1848,  741, 2055, 2059, 2057, 2062, 2070, 2073, 2075, 2077,
     2079, 2082, 2084, 2086, 2088, 2094, 2096, 2098, 2100, 2103,
     2110, 2108, 2115, 2119, 2123, 2127, 2129, 2132, 2135, 2137,
     2140, 2146, 2148, 2150, 2152, 2157, 2159, 2162,  275, 1124,
     1902,  468, 2164, 2170, 2172, 2174, 2179, 2181, 2183, 2185,
     2187, 2190, 2192, 2196, 2201, 2207, 2209, 2211, 2213, 2218,

     2222, 2224, 2228, 2232, 2234, 2236, 2240, 2242, 2012,  236,
      830, 2244, 2246, 2248, 2250, 2254, 2257, 2259, 2261, 2263,
     2265, 2267, 2272, 2274, 2276, 2286, 2292, 2289, 2294, 2165,
     2175, 2296, 2298, 2304, 2306, 2309, 2311, 2313, 2316, 2325,
     2328, 2331, 2333, 2337, 2339, 2341,  138, 2197, 2343, 2350,
     2352, 2359, 2361, 2363, 2367, 2370, 2374, 2376, 2379, 2385,
     2387, 2389,  123, 2391, 2394, 2398, 2405, 2407, 2411, 2413,
     2415, 2417, 2420, 2425, 2429, 2431, 2433, 2436, 2438, 2442,
     2446, 2450, 2453, 2455, 2457, 2459, 2588, 2520, 2524, 2527,
     2532, 2536, 2543, 2550, 2553, 2559, 2566, 2573, 2580

    } ;

static yyconst flex_int16_t yy_def[800] =
    {   0,
      787,    1,  787,  787,  787,  787,  787,  788,  787,  787,
      789,  790,  787,  787,  789,   15,  791,  791,  791,  792,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  787,  788,  787,   15,  787,  790,  790,  790,
      790,  787,  793,  794,  795,  791,  791,  791,  787,  790,
       25,  791,  792,  792,  792,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  787,  790,  790,  790,  796,  797,  794,  795,
      791,  791,  792,  792,  792,  792,  792,  792,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  796,  798,  796,
      797,  799,  787,  791,  792,  792,  792,  792,  792,  792,
      792,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  796,  796,
      787,  796,  799,  797,  797,  787,  791,  792,  792,  792,

      792,  792,  792,  792,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  787,  787,  797,  787,

      787,  787,  792,  792,  792,  792,  792,  792,  792,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      787,  792,  792,  792,  792,  792,  792,  792,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  792,  792,  792,  792,
      792,  792,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  792,  792,
      792,  792,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  792,  792,
      792,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  792,
      792,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  792,  792,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  792,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,    0,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787

    } ;

static yyconst flex_int16_t yy_nxt[2653] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   16,   16,   16,   16,   16,   17,   18,
       17,   17,   19,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   20,   21,   22,
       23,   24,   25,   26,   27,   17,   28,   29,   17,   30,
       31,   32,   33,   34,   17,   35,   36,   37,   38,   39,
       40,   41,   42,   17,   43,   43,   43,   43,   45,   52,
       52,   52,   52,   52,   52,   52,   53,   63,   45,   63,
       54,   47,   48,   56,   48,   56,   63,   48,   56,   43,
       43,   47,   48,   56,  276,   48,   56,   63,   58,   48,

      787,   47,   49,  399,   50,   50,   50,   50,   50,   50,
       50,   47,   48,   56,   65,   51,  275,   48,   56,   48,
       56,  269,  101,   48,   56,  270,   48,   56,   92,   81,
       55,   93,   63,   48,   56,   51,   59,   60,   56,   82,
       61,   61,   61,   61,   61,   61,   61,   63,   66,   83,
      142,   48,   56,   71,   48,   56,   76,   72,   67,   62,
       68,   48,   56,   73,   69,   70,   74,   77,   48,   56,
       78,   79,   63,   75,   80,   59,   60,   56,  176,   61,
       61,   61,   61,   61,   61,   61,   48,   56,   48,   56,
      162,   87,   94,  401,   95,   48,   56,   96,  102,   88,

       48,   56,   89,   48,   56,   90,  103,   48,   56,   48,
       56,   91,   48,   56,   48,   56,  151,   84,   63,   85,
       48,   56,  152,   97,  160,  104,   48,   56,  272,   86,
       98,   99,  273,  106,   48,   56,  100,  107,   63,  105,
       63,  108,  113,  503,  119,   63,  114,  109,  120,  115,
      110,  280,  111,  505,  112,   48,   56,  138,  139,  116,
       48,   56,  117,  130,  121,  390,  118,   48,   56,  391,
       48,   56,  269,  131,   48,   56,  392,  133,   48,   56,
      132,   63,  134,   63,   63,  135,   52,   52,   52,   52,
       52,   52,   52,  136,  153,  154,  165,  155,  279,  137,

       63,  122,  156,  157,  158,  123,   63,  161,  124,  125,
      787,   48,  168,   63,  140,  281,  126,  127,  141,  128,
      404,  129,   59,   59,   48,   56,  143,  143,  143,  143,
      143,  143,  143,  787,   63,  145,  145,  145,  145,  145,
      145,  145,   49,  398,   50,   50,   50,   50,   50,   50,
       50,   63,   57,   63,   57,   51,   52,   52,   52,   52,
       52,   52,   52,   63,   57,   48,   56,   47,  143,  143,
      143,  143,  143,  143,  143,   51,   59,   60,  144,  403,
      146,  146,  146,  146,  146,  146,  146,   47,  144,  585,
      146,  146,  146,  146,  146,  146,  146,   48,   56,   48,

       56,   63,   48,   56,   48,   56,   48,   56,   48,   56,
      395,   48,   56,  159,  396,   48,   56,   48,   56,   48,
       56,   63,   48,   56,   48,   56,   48,   56,   48,   56,
       48,   56,   48,   56,  507,   48,   56,  269,  172,   48,
       56,  497,  166,   48,   56,  163,  167,  174,  177,   48,
       56,  164,  173,  169,  170,  171,  178,   63,  175,  179,
      183,  185,  182,   63,  188,  180,  189,  181,  506,  192,
      184,  191,   48,   56,   48,   56,  186,   63,  187,  193,
      394,  190,  400,  198,   48,   56,  194,  196,  711,  199,
       48,   56,  195,   48,   56,   48,   56,  200,   48,   56,

       48,   56,   48,   56,   48,   56,   48,   56,   48,   56,
       48,   56,   48,   56,   48,   56,   48,   56,   48,   56,
       63,  197,   48,   56,   48,   56,  269,  202,   48,   56,
      498,   48,   56,   48,   56,  394,  203,  210,  201,   48,
       56,  402,  207,  204,  205,   48,   56,   48,   56,  206,
      208,  209,  211,  215,   48,   56,  217,   48,   56,  212,
      213,  214,  394,  216,  389,  218,   48,   56,   48,   56,
      224,  222,  219,   63,  225,  220,  221,  223,   48,   56,
       48,   56,   48,   56,   63,  226,   63,  227,  232,  508,
      228,   48,   56,   48,   56,   48,   56,   48,   56,   63,

      229,  277,  230,  231,  269,   48,   56,  233,  392,  234,
      239,  278,  240,  235,  504,  236,  238,   48,   56,  389,
       48,   56,  642,  237,  499,   48,   56,  248,  500,  241,
      394,  243,   48,   56,   48,   56,  242,   63,  244,  245,
       48,   56,  393,  246,   48,   56,  501,  249,   48,   56,
      509,  250,  247,  252,   48,   56,   48,   56,  253,  257,
       63,  254,  251,   63,   48,   56,   48,   56,  255,  256,
       48,   56,   48,   56,  262,   48,   56,  639,  263,  258,
      393,  259,  260,  269,  274,  261,   48,   56,  582,  266,
      143,  143,  143,  143,  143,  143,  143,  264,  267,   48,

       56,  265,  144,  787,  145,  145,  145,  145,  145,  145,
      145,   48,   56,   63,  144,   51,  146,  146,  146,  146,
      146,  146,  146,  787,  282,   48,   56,   48,   56,  283,
       48,   56,   48,   56,  284,   51,   48,   56,   48,   56,
       48,   56,   63,   48,   56,  285,   48,   56,   48,   56,
       63,   48,   56,   48,   56,   48,   56,   48,   56,  682,
      288,   63,   48,   56,  587,  287,  290,  272,  286,   48,
       56,  502,  291,  289,  292,  293,   48,   56,   48,   56,
      148,   48,   56,  680,  299,   48,   56,  300,   48,   56,
      144,  295,   48,   56,  294,  296,   48,   56,  787,  302,

      393,  297,  298,  301,  581,   48,   56,   48,   56,  305,
      303,  306,  787,   48,   56,   48,   56,   48,   56,   63,
      307,  304,  308,   48,   56,  310,  309,  311,   48,   56,
      312,  641,   48,   56,  787,   48,   56,   48,   56,   63,
      313,  317,   48,   56,  314,  318,  315,  316,   63,  319,
       48,   56,  731,  321,   48,   56,   48,   56,  322,   48,
       56,   48,   56,   48,   56,  320,  323,  324,  325,   48,
       56,   48,   56,  588,   48,   56,   48,   56,   48,   56,
       48,   56,   48,   56,   48,   56,  326,   48,   56,   48,
       56,   48,   56,   48,   56,   48,   56,   48,   56,  787,

      327,  330,  329,  328,  333,  332,  787,  334,   48,   56,
       48,   56,   48,   56,   48,   56,   48,   56,  331,   48,
       56,  337,  338,   48,   56,   48,   56,  335,   48,   56,
       48,   56,  336,   48,   56,   48,   56,   48,   56,  787,
      339,   48,   56,  344,   48,   56,  341,   48,   56,  340,
       48,   56,  787,  343,   48,   56,   48,   56,  342,  345,
       48,   56,   48,   56,  348,   48,   56,  346,  347,  354,
      349,  352,  787,  350,  351,   48,   56,   48,   56,   48,
       56,   63,  358,   48,   56,  353,   48,   56,  355,   48,
       56,  356,   48,   56,  361,   48,   56,  787,  357,  787,

      359,   48,   56,   48,   56,  360,  363,   48,   56,  583,
      362,   48,   56,  367,  787,  365,   48,   56,  369,   48,
       56,   48,   56,  787,  364,   48,   56,  366,   48,   56,
       48,   56,  368,   48,   56,  370,  787,  371,  787,  372,
      787,  374,   48,   56,  373,  375,   48,   56,   48,   56,
      376,   48,   56,   48,   56,  378,   48,   56,   48,   56,
       48,   56,  787,  377,   48,   56,  379,  787,  380,  787,
       48,   56,   48,   56,   48,   56,   48,   56,  383,  382,
       48,   56,   48,   56,  787,   48,   56,   48,   56,  387,
      386,  381,  397,  787,  384,   48,   56,  385,   48,   56,

       48,   56,   48,   56,  787,  388,   48,   56,   48,   56,
       48,   56,   48,   56,  408,   48,   56,   48,   56,  405,
       48,   56,  406,   48,   56,   48,   56,  407,  409,   48,
       56,   48,   56,   63,  410,   48,   56,  787,  411,  787,
       48,   56,  415,  412,  414,   48,   56,   48,   56,  787,
       48,   56,   48,   56,  709,  417,  413,  787,  418,  422,
       48,   56,  787,  419,  416,   48,   56,   48,   56,  420,
      421,  787,  425,   48,   56,  423,   48,   56,   48,   56,
      424,  426,   48,   56,   48,   56,  430,  427,  428,   48,
       56,  787,   48,   56,  787,  429,   48,   56,   48,   56,

       48,   56,  432,   48,   56,   48,   56,   48,   56,  431,
       48,   56,   63,  434,   48,   56,   48,   56,   48,   56,
      787,   48,   56,   48,   56,  433,   48,   56,  787,  435,
      438,   48,   56,  441,  436,  437,  787,  443,  787,  439,
      584,   48,   56,   48,   56,   48,   56,  787,  444,  440,
       48,   56,  787,  448,  442,   48,   56,   48,   56,  787,
      450,   48,   56,  445,  447,   48,   56,  787,  446,   48,
       56,   48,   56,  449,  451,   48,   56,   48,   56,  787,
       48,   56,   48,   56,   48,   56,  452,   48,   56,   48,
       56,  455,   48,   56,   48,   56,   48,   56,  453,  787,

      457,   48,   56,   48,   56,  787,  454,   48,   56,  456,
      460,   48,   56,   48,   56,  787,  461,  787,  458,   48,
       56,  787,  462,  464,   48,   56,  459,   48,   56,   48,
       56,  463,   48,   56,  466,  787,   48,   56,   48,   56,
      470,  787,  465,   48,   56,   48,   56,   48,   56,   48,
       56,  467,   48,   56,  469,   48,   56,  468,   48,   56,
      787,  471,  472,   48,   56,   48,   56,   48,   56,   48,
       56,  473,  787,  475,  476,  478,   48,   56,  474,  480,
      787,  477,   48,   56,   48,   56,  481,   48,   56,   48,
       56,  787,  479,   48,   56,   48,   56,   48,   56,   63,

      484,   48,   56,  787,  485,   48,   56,   48,   56,  787,
      482,  483,   48,   56,   48,   56,   48,   56,  787,  486,
      488,   48,   56,   48,   56,   48,   56,  586,  489,  787,
      487,   48,   56,   48,   56,  492,  787,  493,  787,  490,
       48,   56,   48,   56,  491,  496,  510,   48,   56,   63,
      494,  495,   48,   56,   48,   56,   48,   56,   48,   56,
       48,   56,   48,   56,   48,   56,   48,   56,   48,   56,
       48,   56,  511,   48,   56,   48,   56,  637,   48,   56,
      787,   48,   56,  513,  787,   48,   56,  512,   48,   56,
       48,   56,  516,   48,   56,   48,   56,   48,   56,   48,

       56,  514,  787,  515,  521,   48,   56,   48,   56,   48,
       56,  518,  523,  522,  520,  519,   48,   56,  517,  524,
      525,   63,  526,   48,   56,   48,   56,   48,   56,   48,
       56,   48,   56,   48,   56,  528,  787,  529,  787,  530,
      527,  787,  532,   48,   56,   48,   56,   48,   56,  638,
       48,   56,   48,   56,   48,   56,  531,   48,   56,  534,
       48,   56,   48,   56,  533,   48,   56,  535,   48,   56,
       48,   56,  536,   48,   56,  537,   48,   56,  539,   48,
       56,  540,   48,   56,   48,   56,  787,  542,   48,   56,
      544,  545,  538,  541,   48,   56,   48,   56,  787,  543,

       48,   56,  547,   48,   56,  787,  551,  546,   48,   56,
       48,   56,  787,  549,   48,   56,  553,  787,  550,  548,
      554,   48,   56,   48,   56,   48,   56,  555,   48,   56,
      787,  552,   48,   56,   48,   56,   48,   56,   48,   56,
       48,   56,  558,   48,   56,   48,   56,   48,   56,  556,
      557,   48,   56,   48,   56,   48,   56,  559,   48,   56,
      561,   48,   56,  787,  560,   48,   56,  562,  564,   48,
       56,   48,   56,  787,  565,   48,   56,   48,   56,   48,
       56,  787,  567,  563,   48,   56,   48,   56,  787,  566,
      787,  570,  571,  787,  568,   48,   56,   48,   56,  569,

       48,   56,   48,   56,  787,  574,   48,   56,   48,   56,
       48,   56,  573,  572,  787,  575,  578,   48,   56,   48,
       56,   48,   56,  787,  579,  576,   48,   56,   48,   56,
       48,   56,  589,  577,   48,   56,   48,   56,   48,   56,
      580,   48,   56,   48,   56,   48,   56,   48,   56,  592,
       48,   56,   63,  590,  787,  595,   48,   56,   48,   56,
      591,  593,  596,   48,   56,  598,  594,   48,   56,   48,
       56,   48,   56,  599,   48,   56,   48,   56,  787,  597,
      640,  601,   48,   56,   48,   56,  600,   48,   56,   48,
       56,  787,   48,   56,   63,   48,   56,  603,  787,  602,

      787,  604,   48,   56,   48,   56,   48,   56,  607,   48,
       56,   48,   56,   48,   56,  605,  609,  787,  608,   48,
       56,  610,  679,  606,  611,  612,   48,   56,   48,   56,
       48,   56,  613,   48,   56,   48,   56,   48,   56,  614,
       48,   56,   48,   56,   48,   56,   48,   56,  787,  615,
       48,   56,   48,   56,   48,   56,  616,   63,   48,   56,
       48,   56,   48,   56,  618,   48,   56,   48,   56,  787,
      617,   48,   56,  787,  621,  787,  622,   48,   56,  787,
      623,  787,  619,   48,   56,  681,  624,  620,  625,   48,
       56,   48,   56,   48,   56,   48,   56,   48,   56,   48,

       56,   48,   56,   48,   56,   48,   56,   48,   56,   48,
       56,   63,   48,   56,  787,  626,  787,  627,   48,   56,
       48,   56,   48,   56,  628,   48,   56,  629,   48,   56,
       48,   56,   48,   56,   48,   56,  630,  787,  631,  710,
      632,   48,   56,   48,   56,  634,  635,  787,   48,   56,
      633,  787,  645,   48,   56,  787,  636,  787,  643,  644,
      787,  646,  647,  787,  648,  649,   48,   56,   48,   56,
       48,   56,  787,  651,   48,   56,  787,  650,  652,   48,
       56,   48,   56,   48,   56,  653,   48,   56,   48,   56,
      787,   48,   56,   48,   56,   48,   56,   48,   56,  787,

      654,   48,   56,   48,   56,   48,   56,   48,   56,   48,
       56,  787,  655,   48,   56,   48,   56,   48,   56,   48,
       56,   63,  658,  659,  656,  660,  657,  661,   48,   56,
       48,   56,  787,  663,   48,   56,  787,  664,  662,   48,
       56,  665,   48,   56,   48,   56,   48,   56,  668,  730,
      666,   48,   56,   48,   56,   48,   56,   48,   56,  669,
      667,   48,   56,   48,   56,   48,   56,   48,   56,  670,
       48,   56,  787,  671,  787,  673,  787,  672,   48,   56,
      674,   48,   56,   48,   56,   48,   56,   48,   56,  676,
       48,   56,   48,   56,   48,   56,   48,   56,  677,  678,

      675,  683,   48,   56,   48,   56,   48,   56,   48,   56,
      787,   48,   56,  686,  787,  687,   48,   56,   48,   56,
      684,  787,  689,   48,   56,  787,  685,   48,   56,  690,
      787,   48,   56,  787,  688,   48,   56,   48,   56,  691,
       48,   56,  694,   48,   56,   48,   56,  787,   48,   56,
      693,  695,  696,  692,   48,   56,   48,   56,   48,   56,
       48,   56,  787,  697,  699,   48,   56,   48,   56,  700,
       48,   56,   48,   56,   63,  698,  787,  701,   48,   56,
       48,   56,   48,   56,   63,  702,  703,   48,   56,   48,
       56,   48,   56,   48,   56,   48,   56,  707,   48,   56,

       48,   56,  747,  704,   48,   56,   63,  712,  705,   48,
       56,  713,  748,  706,  708,   48,   56,   48,   56,   48,
       56,   48,   56,  717,  715,  714,   48,   56,  718,  716,
       48,   56,   48,   56,  763,  720,   48,   56,  787,  721,
       48,   56,   48,   56,   48,   56,  719,  722,   48,   56,
       48,   56,   48,   56,   48,   56,   48,   56,   48,   56,
      787,  725,   48,   56,  723,   48,   56,   48,   56,   48,
       56,   48,   56,   48,   56,   48,   56,  787,  724,  728,
       48,   56,   48,   56,   48,   56,  734,  787,  733,  727,
      732,  726,  735,  729,   48,   56,  736,   48,   56,  787,

       48,   56,   48,   56,   48,   56,   48,   56,  787,  737,
      739,  738,   48,   56,   48,   56,  741,   48,   56,   48,
       56,   48,   56,  787,   48,   56,  787,  740,  743,  742,
      744,  787,  746,   48,   56,  787,   48,   56,  745,   48,
       56,   48,   56,  787,  750,   48,   56,   48,   56,   48,
       56,   48,   56,  753,  787,  754,  755,  749,   48,   56,
       48,   56,  751,  756,  787,  752,  757,   48,   56,   48,
       56,   48,   56,  787,  759,   48,   56,  760,   48,   56,
      787,  761,   48,   56,   48,   56,  758,   48,   56,  787,
      762,  787,  764,   48,   56,   48,   56,   48,   56,   48,

       56,  787,   48,   56,  787,  765,   48,   56,  787,  767,
      768,  787,  766,   48,   56,   48,   56,  787,  770,   48,
       56,   48,   56,   48,   56,   48,   56,  771,   48,   56,
      787,  769,  772,   48,   56,  787,  773,   48,   56,   48,
       56,   48,   56,  787,   48,   56,   48,   56,  787,  774,
       48,   56,  787,  775,   48,   56,  776,  777,   48,   56,
      778,   48,   56,   48,   56,   48,   56,   48,   56,  787,
      787,  787,  787,  779,  787,  781,  787,  780,  782,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      783,  787,  787,  787,  787,  787,  787,  787,  787,  787,

      787,  787,  787,  784,  787,  787,  787,  787,  785,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  786,
       44,  787,   44,   44,   44,   44,   44,   46,   46,   48,
       48,   48,   48,   48,   57,   57,   57,   57,   57,   64,
       64,   64,   64,  147,  147,  147,  147,  147,  147,  147,
      149,  787,  149,  149,  149,  149,  149,  150,  150,  268,
      268,  268,  268,  268,  268,  268,  271,  271,  271,  271,
      271,  271,  271,  389,  389,  389,  389,  389,  389,  389,
      394,  394,  394,  394,  394,  394,  394,    3,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,

      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787
    } ;

static yyconst flex_int16_t yy_chk[2653] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    5,    6,    6,   11,   13,
       13,   13,   13,   13,   13,   13,   14,  154,   15,  276,
       14,   11,   17,   17,   18,   18,   20,   27,   27,   43,
       43,   15,   29,   29,  154,   24,   24,  153,   18,   56,

       56,   11,   12,  276,   12,   12,   12,   12,   12,   12,
       12,   15,   42,   42,   20,   12,  153,   21,   21,   22,
       22,  147,   29,   57,   57,  147,   23,   23,   27,   24,
       15,   27,  763,   79,   79,   12,   19,   19,   19,   24,
       19,   19,   19,   19,   19,   19,   19,  747,   21,   24,
       42,   97,   97,   22,   69,   69,   23,   22,   21,   19,
       21,   26,   26,   22,   21,   21,   22,   23,   30,   30,
       23,   23,  278,   22,   23,   25,   25,   25,   79,   25,
       25,   25,   25,   25,   25,   25,   67,   67,   28,   28,
       69,   26,   28,  278,   28,   31,   31,   28,   30,   26,

       58,   58,   26,   32,   32,   26,   30,   33,   33,   62,
       62,   26,   34,   34,   35,   35,   58,   25,  398,   25,
       40,   40,   62,   28,   67,   31,   37,   37,  148,   25,
       28,   28,  148,   32,   38,   38,   28,   32,  157,   31,
      400,   32,   34,  398,   35,  710,   34,   32,   35,   34,
       33,  157,   33,  400,   33,   39,   39,   40,   40,   34,
       71,   71,   34,   37,   35,  269,   34,   36,   36,  269,
       41,   41,  270,   37,   68,   68,  270,   38,   74,   74,
       37,  156,   38,   65,  679,   39,   45,   45,   45,   45,
       45,   45,   45,   39,   65,   65,   71,   65,  156,   39,

      281,   36,   65,   65,   65,   36,  158,   68,   36,   36,
       61,   61,   74,  640,   41,  158,   36,   36,   41,   36,
      281,   36,   47,   47,  100,  100,   47,   47,   47,   47,
       47,   47,   47,   49,  275,   49,   49,   49,   49,   49,
       49,   49,   50,  275,   50,   50,   50,   50,   50,   50,
       50,  638,   61,  280,   61,   50,   52,   52,   52,   52,
       52,   52,   52,  506,   61,   66,   66,   52,   59,   59,
       59,   59,   59,   59,   59,   50,   51,   51,   51,  280,
       51,   51,   51,   51,   51,   51,   51,   52,   60,  506,
       60,   60,   60,   60,   60,   60,   60,   70,   70,   72,

       72,  583,   73,   73,   75,   75,   76,   76,   77,   77,
      272,   80,   80,   66,  272,   78,   78,   82,   82,   83,
       83,  402,   84,   84,   81,   81,   88,   88,   85,   85,
       87,   87,   86,   86,  402,   89,   89,  389,   77,   90,
       90,  389,   72,   92,   92,   70,   73,   78,   80,   91,
       91,   70,   77,   75,   76,   76,   81,  401,   78,   81,
       84,   85,   83,  277,   86,   81,   86,   82,  401,   88,
       84,   87,   93,   93,   94,   94,   85,  682,   85,   89,
      581,   86,  277,   94,   95,   95,   90,   92,  682,   95,
       96,   96,   91,   98,   98,   99,   99,   96,  101,  101,

      102,  102,  103,  103,  105,  105,  104,  104,  107,  107,
      106,  106,  108,  108,  109,  109,  111,  111,  112,  112,
      279,   93,  110,  110,  113,  113,  390,   99,  114,  114,
      390,  115,  115,  116,  116,  502,   99,  105,   98,  117,
      117,  279,  102,   99,   99,  118,  118,  119,  119,  101,
      103,  104,  106,  108,  120,  120,  110,  121,  121,  106,
      107,  107,  501,  109,  498,  111,  122,  122,  123,  123,
      117,  116,  113,  403,  118,  114,  115,  116,  124,  124,
      125,  125,  126,  126,  155,  119,  399,  120,  121,  403,
      120,  127,  127,  128,  128,  129,  129,  131,  131,  588,

      120,  155,  120,  120,  392,  130,  130,  122,  392,  122,
      125,  155,  126,  122,  399,  122,  124,  132,  132,  497,
      133,  133,  588,  123,  393,  134,  134,  131,  393,  126,
      273,  128,  135,  135,  136,  136,  127,  404,  129,  130,
      138,  138,  394,  130,  137,  137,  394,  131,  139,  139,
      404,  131,  130,  133,  140,  140,  141,  141,  133,  134,
      585,  133,  132,  503,  142,  142,  151,  151,  133,  133,
      152,  152,  161,  161,  138,  159,  159,  585,  138,  135,
      271,  136,  137,  268,  151,  137,  162,  162,  503,  141,
      143,  143,  143,  143,  143,  143,  143,  139,  142,  160,

      160,  140,  145,  144,  145,  145,  145,  145,  145,  145,
      145,  163,  163,   64,  146,  145,  146,  146,  146,  146,
      146,  146,  146,   63,  159,  164,  164,  165,  165,  160,
      166,  166,  167,  167,  162,  145,  168,  168,  169,  169,
      170,  170,  508,  171,  171,  163,  172,  172,  173,  173,
      642,  174,  174,  175,  175,  176,  176,  177,  177,  642,
      166,  639,  178,  178,  508,  165,  168,  395,  164,  179,
      179,  395,  169,  167,  170,  171,  180,  180,  181,  181,
       53,  182,  182,  639,  176,  183,  183,  177,  184,  184,
       48,  173,  185,  185,  172,  174,  186,  186,   46,  179,

      499,  175,  175,  178,  499,  187,  187,  188,  188,  181,
      180,  182,   16,  189,  189,  190,  190,  191,  191,  587,
      183,  180,  184,  192,  192,  185,  184,  185,  193,  193,
      185,  587,  194,  194,    3,  195,  195,  196,  196,  711,
      185,  188,  197,  197,  185,  189,  186,  187,  509,  190,
      198,  198,  711,  192,  199,  199,  200,  200,  193,  201,
      201,  202,  202,  203,  203,  191,  194,  195,  196,  204,
      204,  205,  205,  509,  206,  206,  207,  207,  208,  208,
      209,  209,  210,  210,  212,  212,  197,  211,  211,  213,
      213,  214,  214,  215,  215,  216,  216,  217,  217,    0,

      201,  203,  202,  201,  206,  205,    0,  207,  218,  218,
      219,  219,  220,  220,  221,  221,  222,  222,  204,  223,
      223,  211,  212,  224,  224,  226,  226,  208,  225,  225,
      227,  227,  210,  228,  228,  229,  229,  230,  230,    0,
      214,  231,  231,  221,  232,  232,  218,  233,  233,  217,
      234,  234,    0,  220,  235,  235,  236,  236,  219,  222,
      237,  237,  238,  238,  224,  239,  239,  222,  223,  230,
      225,  228,    0,  226,  227,  240,  240,  241,  241,  242,
      242,  504,  233,  243,  243,  229,  244,  244,  231,  246,
      246,  231,  245,  245,  237,  247,  247,    0,  232,    0,

      234,  248,  248,  250,  250,  235,  239,  249,  249,  504,
      238,  251,  251,  242,    0,  241,  252,  252,  244,  253,
      253,  254,  254,    0,  240,  257,  257,  241,  255,  255,
      256,  256,  243,  258,  258,  245,    0,  246,    0,  247,
        0,  249,  259,  259,  248,  251,  260,  260,  261,  261,
      252,  262,  262,  264,  264,  254,  263,  263,  265,  265,
      266,  266,    0,  253,  267,  267,  255,    0,  256,    0,
      274,  274,  282,  282,  283,  283,  284,  284,  261,  260,
      285,  285,  286,  286,    0,  287,  287,  288,  288,  266,
      264,  259,  274,    0,  262,  289,  289,  263,  290,  290,

      291,  291,  292,  292,    0,  267,  293,  293,  294,  294,
      295,  295,  296,  296,  286,  297,  297,  298,  298,  282,
      299,  299,  283,  300,  300,  302,  302,  285,  287,  301,
      301,  303,  303,  680,  288,  304,  304,    0,  290,    0,
      305,  305,  296,  293,  295,  306,  306,  307,  307,    0,
      308,  308,  310,  310,  680,  298,  294,    0,  299,  301,
      309,  309,    0,  299,  297,  311,  311,  312,  312,  299,
      300,    0,  304,  313,  313,  302,  314,  314,  316,  316,
      303,  305,  315,  315,  318,  318,  310,  306,  308,  317,
      317,    0,  319,  319,    0,  309,  320,  320,  321,  321,

      322,  322,  312,  323,  323,  324,  324,  325,  325,  311,
      326,  326,  505,  314,  327,  327,  328,  328,  329,  329,
        0,  330,  330,  331,  331,  313,  332,  332,    0,  315,
      320,  333,  333,  323,  317,  319,    0,  325,    0,  321,
      505,  334,  334,  335,  335,  336,  336,    0,  327,  322,
      337,  337,    0,  331,  324,  338,  338,  339,  339,    0,
      333,  340,  340,  328,  330,  341,  341,    0,  329,  342,
      342,  343,  343,  332,  334,  344,  344,  345,  345,    0,
      346,  346,  347,  347,  348,  348,  336,  349,  349,  350,
      350,  340,  351,  351,  352,  352,  353,  353,  337,    0,

      343,  354,  354,  355,  355,    0,  338,  356,  356,  341,
      346,  357,  357,  358,  358,    0,  347,    0,  344,  359,
      359,    0,  348,  350,  360,  360,  345,  361,  361,  362,
      362,  349,  363,  363,  353,    0,  364,  364,  365,  365,
      357,    0,  352,  366,  366,  367,  367,  368,  368,  369,
      369,  354,  370,  370,  356,  371,  371,  355,  372,  372,
        0,  359,  360,  373,  373,  374,  374,  375,  375,  376,
      376,  361,    0,  363,  364,  366,  377,  377,  362,  368,
        0,  365,  378,  378,  379,  379,  369,  380,  380,  381,
      381,    0,  367,  382,  382,  383,  383,  384,  384,  507,

      375,  385,  385,    0,  376,  386,  386,  387,  387,    0,
      372,  373,  388,  388,  397,  397,  405,  405,    0,  377,
      379,  406,  406,  407,  407,  408,  408,  507,  380,    0,
      378,  409,  409,  410,  410,  385,    0,  387,    0,  381,
      411,  411,  412,  412,  383,  388,  405,  413,  413,  582,
      387,  387,  414,  414,  415,  415,  416,  416,  417,  417,
      418,  418,  419,  419,  420,  420,  421,  421,  422,  422,
      424,  424,  407,  423,  423,  425,  425,  582,  426,  426,
        0,  427,  427,  415,    0,  428,  428,  410,  429,  429,
      430,  430,  419,  431,  431,  432,  432,  433,  433,  434,

      434,  417,    0,  418,  424,  435,  435,  436,  436,  437,
      437,  421,  426,  425,  423,  422,  438,  438,  420,  427,
      428,  584,  430,  439,  439,  440,  440,  441,  441,  442,
      442,  443,  443,  444,  444,  433,    0,  434,    0,  435,
      431,    0,  437,  445,  445,  446,  446,  447,  447,  584,
      448,  448,  449,  449,  450,  450,  436,  452,  452,  441,
      451,  451,  453,  453,  439,  455,  455,  442,  454,  454,
      456,  456,  443,  457,  457,  444,  458,  458,  446,  459,
      459,  447,  460,  460,  461,  461,    0,  449,  462,  462,
      451,  452,  445,  448,  463,  463,  464,  464,    0,  450,

      465,  465,  454,  466,  466,    0,  458,  453,  467,  467,
      468,  468,    0,  456,  469,  469,  461,    0,  457,  455,
      462,  470,  470,  471,  471,  474,  474,  463,  472,  472,
        0,  460,  473,  473,  475,  475,  476,  476,  477,  477,
      478,  478,  467,  479,  479,  480,  480,  481,  481,  465,
      466,  482,  482,  483,  483,  485,  485,  469,  484,  484,
      472,  486,  486,    0,  470,  487,  487,  473,  476,  488,
      488,  489,  489,    0,  477,  490,  490,  491,  491,  492,
      492,    0,  480,  475,  493,  493,  494,  494,    0,  478,
        0,  483,  484,    0,  481,  495,  495,  496,  496,  482,

      510,  510,  511,  511,    0,  490,  512,  512,  513,  513,
      514,  514,  488,  487,    0,  491,  494,  515,  515,  516,
      516,  517,  517,    0,  494,  493,  518,  518,  519,  519,
      520,  520,  510,  493,  521,  521,  522,  522,  523,  523,
      495,  524,  524,  525,  525,  526,  526,  527,  527,  515,
      528,  528,  586,  513,    0,  518,  529,  529,  530,  530,
      514,  516,  519,  531,  531,  522,  517,  532,  532,  533,
      533,  534,  534,  524,  535,  535,  536,  536,    0,  520,
      586,  527,  537,  537,  538,  538,  526,  539,  539,  540,
      540,    0,  541,  541,  637,  542,  542,  529,    0,  528,

        0,  531,  543,  543,  544,  544,  545,  545,  534,  546,
      546,  547,  547,  548,  548,  532,  537,    0,  535,  549,
      549,  539,  637,  533,  541,  542,  550,  550,  551,  551,
      552,  552,  543,  553,  553,  554,  554,  555,  555,  546,
      556,  556,  557,  557,  558,  558,  559,  559,    0,  549,
      560,  560,  561,  561,  562,  562,  550,  641,  563,  563,
      564,  564,  565,  565,  552,  566,  566,  567,  567,    0,
      551,  568,  568,    0,  556,    0,  557,  569,  569,    0,
      560,    0,  553,  570,  570,  641,  561,  555,  563,  571,
      571,  572,  572,  573,  573,  574,  574,  575,  575,  576,

      576,  577,  577,  578,  578,  579,  579,  580,  580,  589,
      589,  681,  590,  590,    0,  568,    0,  570,  591,  591,
      592,  592,  595,  595,  571,  596,  596,  573,  593,  593,
      594,  594,  597,  597,  598,  598,  574,    0,  575,  681,
      576,  599,  599,  600,  600,  578,  579,    0,  601,  601,
      577,    0,  591,  602,  602,    0,  580,    0,  589,  590,
        0,  592,  593,    0,  594,  595,  603,  603,  604,  604,
      605,  605,    0,  600,  606,  606,    0,  598,  601,  607,
      607,  608,  608,  609,  609,  602,  610,  610,  611,  611,
        0,  612,  612,  613,  613,  614,  614,  615,  615,    0,

      603,  616,  616,  617,  617,  618,  618,  619,  619,  620,
      620,    0,  604,  621,  621,  622,  622,  623,  623,  624,
      624,  709,  611,  612,  608,  613,  609,  614,  625,  625,
      626,  626,    0,  616,  627,  627,    0,  617,  615,  628,
      628,  619,  629,  629,  630,  630,  631,  631,  622,  709,
      620,  632,  632,  633,  633,  634,  634,  635,  635,  623,
      621,  636,  636,  643,  643,  645,  645,  644,  644,  625,
      646,  646,    0,  626,    0,  629,    0,  627,  647,  647,
      631,  648,  648,  649,  649,  650,  650,  651,  651,  634,
      652,  652,  653,  653,  654,  654,  655,  655,  635,  636,

      633,  644,  656,  656,  657,  657,  658,  658,  659,  659,
        0,  660,  660,  649,    0,  650,  662,  662,  661,  661,
      646,    0,  652,  663,  663,    0,  647,  664,  664,  653,
        0,  665,  665,    0,  651,  666,  666,  667,  667,  655,
      668,  668,  659,  669,  669,  670,  670,    0,  671,  671,
      658,  660,  661,  657,  672,  672,  673,  673,  674,  674,
      675,  675,    0,  663,  665,  676,  676,  677,  677,  666,
      678,  678,  683,  683,  730,  664,    0,  669,  684,  684,
      685,  685,  686,  686,  731,  670,  671,  687,  687,  688,
      688,  689,  689,  690,  690,  691,  691,  677,  692,  692,

      693,  693,  730,  672,  694,  694,  748,  683,  675,  695,
      695,  684,  731,  676,  678,  696,  696,  697,  697,  698,
      698,  699,  699,  688,  686,  685,  700,  700,  689,  687,
      701,  701,  702,  702,  748,  693,  703,  703,    0,  695,
      704,  704,  705,  705,  706,  706,  692,  697,  707,  707,
      708,  708,  712,  712,  713,  713,  714,  714,  715,  715,
        0,  702,  716,  716,  698,  717,  717,  718,  718,  719,
      719,  720,  720,  721,  721,  722,  722,    0,  701,  707,
      723,  723,  724,  724,  725,  725,  714,    0,  713,  706,
      712,  703,  715,  708,  726,  726,  716,  728,  728,    0,

      727,  727,  729,  729,  732,  732,  733,  733,    0,  721,
      723,  722,  734,  734,  735,  735,  725,  736,  736,  737,
      737,  738,  738,    0,  739,  739,    0,  724,  726,  725,
      727,    0,  729,  740,  740,    0,  741,  741,  728,  742,
      742,  743,  743,    0,  734,  744,  744,  745,  745,  746,
      746,  749,  749,  737,    0,  738,  739,  732,  750,  750,
      751,  751,  735,  740,    0,  736,  741,  752,  752,  753,
      753,  754,  754,    0,  743,  755,  755,  744,  756,  756,
        0,  745,  757,  757,  758,  758,  742,  759,  759,    0,
      746,    0,  750,  760,  760,  761,  761,  762,  762,  764,

      764,    0,  765,  765,    0,  751,  766,  766,    0,  755,
      756,    0,  752,  767,  767,  768,  768,    0,  758,  769,
      769,  770,  770,  771,  771,  772,  772,  760,  773,  773,
        0,  757,  765,  774,  774,    0,  766,  775,  775,  776,
      776,  777,  777,    0,  778,  778,  779,  779,    0,  768,
      780,  780,    0,  769,  781,  781,  770,  772,  782,  782,
      773,  783,  783,  784,  784,  785,  785,  786,  786,    0,
        0,    0,    0,  775,    0,  777,    0,  776,  778,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      779,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  780,    0,    0,    0,    0,  783,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  785,
      788,    0,  788,  788,  788,  788,  788,  789,  789,  790,
      790,  790,  790,  790,  791,  791,  791,  791,  791,  792,
      792,  792,  792,  793,  793,  793,  793,  793,  793,  793,
      794,    0,  794,  794,  794,  794,  794,  795,  795,  796,
      796,  796,  796,  796,  796,  796,  797,  797,  797,  797,
      797,  797,  797,  798,  798,  798,  798,  798,  798,  798,
      799,  799,  799,  799,  799,  799,  799,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,

      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[170] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "thriftl.ll"
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */
#line 27 "thriftl.ll"

/* This is redundant with some of the flags in Makefile.am, but it works
 * when people override CXXFLAGS without being careful. The pragmas are
 * the 'right' way to do it, but don't work on old-enough GCC (in particular
 * the GCC that ship on Mac OS X 10.6.5, *counter* to what the GNU docs say)
 *
 * We should revert the Makefile.am changes once Apple ships a reasonable
 * GCC.
 */
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"

#include <string>
#include <errno.h>
#include <stdlib.h>

#include "main.h"
#include "globals.h"
#include "parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 */
#include "thrifty.h"

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

void unexpected_token(char* text) {
  yyerror("Unexpected token in input: \"%s\"\n", text);
  exit(1);
}

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Our inputs are all single files, so no need for yywrap
 */
/**
 * We don't use it, and it fires up warnings at -Wall
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1625 "thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 103 "thriftl.ll"


#line 1813 "thriftl.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 788 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2588 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 105 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 106 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 107 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 108 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 109 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 111 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 112 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 114 "thriftl.ll"
{ yylval.iconst=0; return tok_int_constant; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 115 "thriftl.ll"
{ yylval.iconst=1; return tok_int_constant; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 117 "thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 118 "thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 119 "thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 120 "thriftl.ll"
{ return tok_cpp_type;             }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 121 "thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 122 "thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 123 "thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 124 "thriftl.ll"
{ return tok_delphi_namespace;     }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 125 "thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 128 "thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 129 "thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 130 "thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 131 "thriftl.ll"
{ return tok_xsd_all;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 132 "thriftl.ll"
{ return tok_xsd_optional;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 133 "thriftl.ll"
{ return tok_xsd_nillable;         }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 134 "thriftl.ll"
{ return tok_xsd_namespace;        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 135 "thriftl.ll"
{ return tok_xsd_attrs;            }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 136 "thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 138 "thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 139 "thriftl.ll"
{ return tok_byte;                 }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 140 "thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 141 "thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 143 "thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 144 "thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 145 "thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "thriftl.ll"
{
  pwarning(0, "\"slist\" is deprecated and will be removed in a future compiler version.  This type should be replaced with \"string\".\n");
  return tok_slist;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 150 "thriftl.ll"
{
  pwarning(0, "\"senum\" is deprecated and will be removed in a future compiler version.  This type should be replaced with \"string\".\n");
  return tok_senum;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 154 "thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 155 "thriftl.ll"
{ return tok_list;                 }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 156 "thriftl.ll"
{ return tok_set;                  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 157 "thriftl.ll"
{ return tok_oneway;               }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 158 "thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 159 "thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 160 "thriftl.ll"
{ return tok_union;                }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 161 "thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 162 "thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 163 "thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 164 "thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 165 "thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 166 "thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 167 "thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 168 "thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 169 "thriftl.ll"
{
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return tok_oneway;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 175 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 176 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 177 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 178 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 179 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 180 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 181 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 182 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 183 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 184 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 185 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 186 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 187 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 188 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 189 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 190 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 191 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 192 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 193 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 194 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 195 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 196 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 197 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 198 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 199 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 200 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 201 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 202 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 203 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 204 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 205 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 206 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 207 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 208 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 209 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 210 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 211 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 212 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 213 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 214 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 215 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 216 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 217 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 218 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 219 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 220 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 221 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 222 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 223 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 224 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 225 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 226 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 227 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 228 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 229 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 230 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 231 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 232 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 233 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 234 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 235 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 236 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 237 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 238 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 239 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 240 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 241 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 242 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 243 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 244 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 245 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 246 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 247 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 248 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 249 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 250 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 251 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 252 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 253 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 254 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 255 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 256 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 257 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 258 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 259 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 260 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 261 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 262 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 263 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 264 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 265 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 266 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 267 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 268 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 269 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 270 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 271 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 272 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 273 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 274 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 275 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 276 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 277 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 279 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 288 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 297 "thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 302 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 307 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 312 "thriftl.ll"
{
  char mark = yytext[0];
  std::string result;
  for(;;)
  {
    int ch = yyinput();
    switch (ch) {
      case EOF:
        yyerror("End of file while read string at %d\n", yylineno);
        exit(1);
      case '\n':
        yyerror("End of line while read string at %d\n", yylineno - 1);
        exit(1);
      case '\\':
        ch = yyinput();
        switch (ch) {
          case 'r':
            result.push_back('\r');
            continue;
          case 'n':
            result.push_back('\n');
            continue;
          case 't':
            result.push_back('\t');
            continue;
          case '"':
            result.push_back('"');
            continue;
          case '\'':
            result.push_back('\'');
            continue;
          case '\\':
            result.push_back('\\');
            continue;
          default:
            yyerror("Bad escape character\n");
            return -1;
        }
        break;
      default:
        if (ch == mark) {
          yylval.id = strdup(result.c_str());
          return tok_literal;
        } else {
          result.push_back(ch);
        }
    }
  }
}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 363 "thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    g_doctext[strlen(g_doctext) - 2] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
  }
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 375 "thriftl.ll"
{
  unexpected_token(yytext);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 380 "thriftl.ll"
{
  /* Catch-all to let us catch "*" in the parser. */
  return (int) yytext[0];
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 385 "thriftl.ll"
ECHO;
	YY_BREAK
#line 2858 "thriftl.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 788 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 788 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 787);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 385 "thriftl.ll"



/* vim: filetype=lex
*/

