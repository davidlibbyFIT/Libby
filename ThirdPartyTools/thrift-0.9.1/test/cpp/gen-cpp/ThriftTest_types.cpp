/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ThriftTest_types.h"

#include <algorithm>

namespace thrift { namespace test {

int _kNumberzValues[] = {
  Numberz::ONE,
  Numberz::TWO,
  Numberz::THREE,
  Numberz::FIVE,
  Numberz::SIX,
  Numberz::EIGHT
};
const char* _kNumberzNames[] = {
  "ONE",
  "TWO",
  "THREE",
  "FIVE",
  "SIX",
  "EIGHT"
};
const std::map<int, const char*> _Numberz_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kNumberzValues, _kNumberzNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Bonk::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t Bonk::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

void swap(Bonk &a, Bonk &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

const char* Bools::ascii_fingerprint = "403F0C4586060E367DA428DD09C59C9C";
const uint8_t Bools::binary_fingerprint[16] = {0x40,0x3F,0x0C,0x45,0x86,0x06,0x0E,0x36,0x7D,0xA4,0x28,0xDD,0x09,0xC5,0x9C,0x9C};

void swap(Bools &a, Bools &b) {
  using ::std::swap;
  swap(a.im_true, b.im_true);
  swap(a.im_false, b.im_false);
  swap(a.__isset, b.__isset);
}

const char* Xtruct::ascii_fingerprint = "01AAAA2258347790947AE6F75EE27B67";
const uint8_t Xtruct::binary_fingerprint[16] = {0x01,0xAA,0xAA,0x22,0x58,0x34,0x77,0x90,0x94,0x7A,0xE6,0xF7,0x5E,0xE2,0x7B,0x67};

void swap(Xtruct &a, Xtruct &b) {
  using ::std::swap;
  swap(a.string_thing, b.string_thing);
  swap(a.byte_thing, b.byte_thing);
  swap(a.i32_thing, b.i32_thing);
  swap(a.i64_thing, b.i64_thing);
  swap(a.__isset, b.__isset);
}

const char* Xtruct2::ascii_fingerprint = "0FA9E7DB20337B1935DECB146BE27561";
const uint8_t Xtruct2::binary_fingerprint[16] = {0x0F,0xA9,0xE7,0xDB,0x20,0x33,0x7B,0x19,0x35,0xDE,0xCB,0x14,0x6B,0xE2,0x75,0x61};

void swap(Xtruct2 &a, Xtruct2 &b) {
  using ::std::swap;
  swap(a.byte_thing, b.byte_thing);
  swap(a.struct_thing, b.struct_thing);
  swap(a.i32_thing, b.i32_thing);
  swap(a.__isset, b.__isset);
}

const char* Xtruct3::ascii_fingerprint = "7E14E617C7C8E24EC18FE35116D3ECC0";
const uint8_t Xtruct3::binary_fingerprint[16] = {0x7E,0x14,0xE6,0x17,0xC7,0xC8,0xE2,0x4E,0xC1,0x8F,0xE3,0x51,0x16,0xD3,0xEC,0xC0};

void swap(Xtruct3 &a, Xtruct3 &b) {
  using ::std::swap;
  swap(a.string_thing, b.string_thing);
  swap(a.changed, b.changed);
  swap(a.i32_thing, b.i32_thing);
  swap(a.i64_thing, b.i64_thing);
  swap(a.__isset, b.__isset);
}

const char* Insanity::ascii_fingerprint = "9E7D0680FA87F83E5A0CEF688569EFE3";
const uint8_t Insanity::binary_fingerprint[16] = {0x9E,0x7D,0x06,0x80,0xFA,0x87,0xF8,0x3E,0x5A,0x0C,0xEF,0x68,0x85,0x69,0xEF,0xE3};

void swap(Insanity &a, Insanity &b) {
  using ::std::swap;
  swap(a.userMap, b.userMap);
  swap(a.xtructs, b.xtructs);
  swap(a.__isset, b.__isset);
}

const char* CrazyNesting::ascii_fingerprint = "65E05391C27EACE759294E3E55DAC83F";
const uint8_t CrazyNesting::binary_fingerprint[16] = {0x65,0xE0,0x53,0x91,0xC2,0x7E,0xAC,0xE7,0x59,0x29,0x4E,0x3E,0x55,0xDA,0xC8,0x3F};

void swap(CrazyNesting &a, CrazyNesting &b) {
  using ::std::swap;
  swap(a.string_field, b.string_field);
  swap(a.set_field, b.set_field);
  swap(a.list_field, b.list_field);
  swap(a.binary_field, b.binary_field);
  swap(a.__isset, b.__isset);
}

const char* Xception::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Xception::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

void swap(Xception &a, Xception &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* Xception2::ascii_fingerprint = "7B1B1DBEB6FD136E8478F45D0399F3C4";
const uint8_t Xception2::binary_fingerprint[16] = {0x7B,0x1B,0x1D,0xBE,0xB6,0xFD,0x13,0x6E,0x84,0x78,0xF4,0x5D,0x03,0x99,0xF3,0xC4};

void swap(Xception2 &a, Xception2 &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.struct_thing, b.struct_thing);
  swap(a.__isset, b.__isset);
}

const char* EmptyStruct::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t EmptyStruct::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

void swap(EmptyStruct &a, EmptyStruct &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* OneField::ascii_fingerprint = "2C32A565725135A023CB591D1A993CFD";
const uint8_t OneField::binary_fingerprint[16] = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};

void swap(OneField &a, OneField &b) {
  using ::std::swap;
  swap(a.field, b.field);
  swap(a.__isset, b.__isset);
}

const char* VersioningTestV1::ascii_fingerprint = "CB65C216C3190178AD7ADECF1928CD97";
const uint8_t VersioningTestV1::binary_fingerprint[16] = {0xCB,0x65,0xC2,0x16,0xC3,0x19,0x01,0x78,0xAD,0x7A,0xDE,0xCF,0x19,0x28,0xCD,0x97};

void swap(VersioningTestV1 &a, VersioningTestV1 &b) {
  using ::std::swap;
  swap(a.begin_in_both, b.begin_in_both);
  swap(a.old_string, b.old_string);
  swap(a.end_in_both, b.end_in_both);
  swap(a.__isset, b.__isset);
}

const char* VersioningTestV2::ascii_fingerprint = "085522DA9EF6E13EF3186B0B4C19DDDB";
const uint8_t VersioningTestV2::binary_fingerprint[16] = {0x08,0x55,0x22,0xDA,0x9E,0xF6,0xE1,0x3E,0xF3,0x18,0x6B,0x0B,0x4C,0x19,0xDD,0xDB};

void swap(VersioningTestV2 &a, VersioningTestV2 &b) {
  using ::std::swap;
  swap(a.begin_in_both, b.begin_in_both);
  swap(a.newint, b.newint);
  swap(a.newbyte, b.newbyte);
  swap(a.newshort, b.newshort);
  swap(a.newlong, b.newlong);
  swap(a.newdouble, b.newdouble);
  swap(a.newstruct, b.newstruct);
  swap(a.newlist, b.newlist);
  swap(a.newset, b.newset);
  swap(a.newmap, b.newmap);
  swap(a.newstring, b.newstring);
  swap(a.end_in_both, b.end_in_both);
  swap(a.__isset, b.__isset);
}

const char* ListTypeVersioningV1::ascii_fingerprint = "CCCCE89C7E9DA10280F5663700677313";
const uint8_t ListTypeVersioningV1::binary_fingerprint[16] = {0xCC,0xCC,0xE8,0x9C,0x7E,0x9D,0xA1,0x02,0x80,0xF5,0x66,0x37,0x00,0x67,0x73,0x13};

void swap(ListTypeVersioningV1 &a, ListTypeVersioningV1 &b) {
  using ::std::swap;
  swap(a.myints, b.myints);
  swap(a.hello, b.hello);
  swap(a.__isset, b.__isset);
}

const char* ListTypeVersioningV2::ascii_fingerprint = "BE556BF7091B2DABBA1863D5E458B15F";
const uint8_t ListTypeVersioningV2::binary_fingerprint[16] = {0xBE,0x55,0x6B,0xF7,0x09,0x1B,0x2D,0xAB,0xBA,0x18,0x63,0xD5,0xE4,0x58,0xB1,0x5F};

void swap(ListTypeVersioningV2 &a, ListTypeVersioningV2 &b) {
  using ::std::swap;
  swap(a.strings, b.strings);
  swap(a.hello, b.hello);
  swap(a.__isset, b.__isset);
}

const char* GuessProtocolStruct::ascii_fingerprint = "C98BFEEE61EF706362155747298111DA";
const uint8_t GuessProtocolStruct::binary_fingerprint[16] = {0xC9,0x8B,0xFE,0xEE,0x61,0xEF,0x70,0x63,0x62,0x15,0x57,0x47,0x29,0x81,0x11,0xDA};

void swap(GuessProtocolStruct &a, GuessProtocolStruct &b) {
  using ::std::swap;
  swap(a.map_field, b.map_field);
  swap(a.__isset, b.__isset);
}

const char* LargeDeltas::ascii_fingerprint = "9DD556A67D1276F4D9389D7B3A153019";
const uint8_t LargeDeltas::binary_fingerprint[16] = {0x9D,0xD5,0x56,0xA6,0x7D,0x12,0x76,0xF4,0xD9,0x38,0x9D,0x7B,0x3A,0x15,0x30,0x19};

void swap(LargeDeltas &a, LargeDeltas &b) {
  using ::std::swap;
  swap(a.b1, b.b1);
  swap(a.b10, b.b10);
  swap(a.b100, b.b100);
  swap(a.check_true, b.check_true);
  swap(a.b1000, b.b1000);
  swap(a.check_false, b.check_false);
  swap(a.vertwo2000, b.vertwo2000);
  swap(a.a_set2500, b.a_set2500);
  swap(a.vertwo3000, b.vertwo3000);
  swap(a.big_numbers, b.big_numbers);
  swap(a.__isset, b.__isset);
}

const char* NestedListsI32x2::ascii_fingerprint = "156D870DAD538FB7DA6861EB02437141";
const uint8_t NestedListsI32x2::binary_fingerprint[16] = {0x15,0x6D,0x87,0x0D,0xAD,0x53,0x8F,0xB7,0xDA,0x68,0x61,0xEB,0x02,0x43,0x71,0x41};

void swap(NestedListsI32x2 &a, NestedListsI32x2 &b) {
  using ::std::swap;
  swap(a.integerlist, b.integerlist);
  swap(a.__isset, b.__isset);
}

const char* NestedListsI32x3::ascii_fingerprint = "481969D8BBB43CDDEBFA0800E2E55AE1";
const uint8_t NestedListsI32x3::binary_fingerprint[16] = {0x48,0x19,0x69,0xD8,0xBB,0xB4,0x3C,0xDD,0xEB,0xFA,0x08,0x00,0xE2,0xE5,0x5A,0xE1};

void swap(NestedListsI32x3 &a, NestedListsI32x3 &b) {
  using ::std::swap;
  swap(a.integerlist, b.integerlist);
  swap(a.__isset, b.__isset);
}

const char* NestedMixedx2::ascii_fingerprint = "ECA6228385A178DDEEF2D6F371457DCB";
const uint8_t NestedMixedx2::binary_fingerprint[16] = {0xEC,0xA6,0x22,0x83,0x85,0xA1,0x78,0xDD,0xEE,0xF2,0xD6,0xF3,0x71,0x45,0x7D,0xCB};

void swap(NestedMixedx2 &a, NestedMixedx2 &b) {
  using ::std::swap;
  swap(a.int_set_list, b.int_set_list);
  swap(a.map_int_strset, b.map_int_strset);
  swap(a.map_int_strset_list, b.map_int_strset_list);
  swap(a.__isset, b.__isset);
}

const char* ListBonks::ascii_fingerprint = "3967FCB1D2A588AFFB6B3D0713F6F380";
const uint8_t ListBonks::binary_fingerprint[16] = {0x39,0x67,0xFC,0xB1,0xD2,0xA5,0x88,0xAF,0xFB,0x6B,0x3D,0x07,0x13,0xF6,0xF3,0x80};

void swap(ListBonks &a, ListBonks &b) {
  using ::std::swap;
  swap(a.bonk, b.bonk);
  swap(a.__isset, b.__isset);
}

const char* NestedListsBonk::ascii_fingerprint = "76F53151491F21E430B14A64523C2C02";
const uint8_t NestedListsBonk::binary_fingerprint[16] = {0x76,0xF5,0x31,0x51,0x49,0x1F,0x21,0xE4,0x30,0xB1,0x4A,0x64,0x52,0x3C,0x2C,0x02};

void swap(NestedListsBonk &a, NestedListsBonk &b) {
  using ::std::swap;
  swap(a.bonk, b.bonk);
  swap(a.__isset, b.__isset);
}

const char* BoolTest::ascii_fingerprint = "B351CA31A26035AB346169C6EFECD393";
const uint8_t BoolTest::binary_fingerprint[16] = {0xB3,0x51,0xCA,0x31,0xA2,0x60,0x35,0xAB,0x34,0x61,0x69,0xC6,0xEF,0xEC,0xD3,0x93};

void swap(BoolTest &a, BoolTest &b) {
  using ::std::swap;
  swap(a.b, b.b);
  swap(a.s, b.s);
  swap(a.__isset, b.__isset);
}

const char* StructA::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t StructA::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

void swap(StructA &a, StructA &b) {
  using ::std::swap;
  swap(a.s, b.s);
}

const char* StructB::ascii_fingerprint = "BA933917D4A6040C47632233A8E4974A";
const uint8_t StructB::binary_fingerprint[16] = {0xBA,0x93,0x39,0x17,0xD4,0xA6,0x04,0x0C,0x47,0x63,0x22,0x33,0xA8,0xE4,0x97,0x4A};

void swap(StructB &a, StructB &b) {
  using ::std::swap;
  swap(a.aa, b.aa);
  swap(a.ab, b.ab);
  swap(a.__isset, b.__isset);
}

}} // namespace
